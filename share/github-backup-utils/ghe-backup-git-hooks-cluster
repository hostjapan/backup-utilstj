#!/usr/bin/env bash
#/ Usage: ghe-backup-git-hooks-cluster
#/ Take an online, incremental snapshot of custom Git hooks configuration.
#/
#/ Note: This command typically isn't called directly. It's invoked by
#/ ghe-backup when the cluster strategy is used.
set -e

# Bring in the backup configuration
. $( dirname "${BASH_SOURCE[0]}" )/ghe-backup-config

# Split host:port into parts
port=$(ssh_port_part "$GHE_HOSTNAME")
host=$(ssh_host_part "$GHE_HOSTNAME")

# Add user / -l option
user="${host%@*}"
[ "$user" = "$host" ] && user="admin"

backup_dir="$GHE_SNAPSHOT_DIR/git-hooks"

# Location of last good backup for rsync --link-dest
backup_current="$GHE_DATA_DIR/current/git-hooks"

# Verify rsync is available.
if ! rsync --version 1>/dev/null 2>&1; then
    echo "Error: rsync not found." 1>&2
    exit 1
fi

# Perform a host-check and establish GHE_REMOTE_XXX variables.
ghe_remote_version_required "$host"

# Generate SSH config for forwarding

config=""

# git server hostnames
hostnames=$(ghe_cluster_online_nodes "git-server")
for hostname in $hostnames; do
  config="$config
Host $hostname
  ProxyCommand ssh -q $GHE_EXTRA_SSH_OPTS -p $port $user@$host nc.openbsd %h %p
  StrictHostKeyChecking=no
"
done

config_file=$(mktemp -t cluster-backup-restore-XXXXXX)
echo "$config" > "$config_file"

opts="$GHE_EXTRA_SSH_OPTS -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o PasswordAuthentication=no"

# Removes the remote sync-in-progress file on exit, re-enabling GC operations
# on the remote instance.
cleanup() {
  rm -f $config_file
}
trap 'cleanup' EXIT
trap 'exit $?' INT # ^C always terminate

# If we have a previous increment, avoid transferring existing files via rsync's
# --link-dest support. This also decreases physical space usage considerably.
if [ -d "$backup_current" ]; then
    link_dest="--link-dest=../../current/git-hooks"
fi

# Transfer Git hooks data from a GitHub instance to the current snapshot
# directory, using a previous snapshot to avoid transferring files that have
# already been transferred. A set of rsync filter rules are provided on stdin
# for each invocation.
rsync_git_hooks_data () {
    port=$(ssh_port_part "$1")
    host=$(ssh_host_part "$1")

    shift
    ghe-rsync -a \
        -e "ssh -q $opts -p $port -F $config_file -l $user" $link_dest \
        --rsync-path='sudo -u git rsync' \
        "$host:$GHE_REMOTE_DATA_USER_DIR/git-hooks/" \
        "$backup_dir" 1>&3
}

for hostname in $hostnames; do
  ghe-ssh -F $config_file "$hostname:122" -- "[ -d '$GHE_REMOTE_DATA_USER_DIR/git-hooks' ]" || exit 0
  # We can stop after the first successful sync since hooks are the same everywhere
  rsync_git_hooks_data $hostname:122 && break
done
